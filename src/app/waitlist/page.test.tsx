import { render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import WaitlistPage from "./page";
import fetchMock from "jest-fetch-mock";

const invalidEmails = [
  "testemail30072001@gmail.",
  "testemail30072001@",
  ".testemail@gmail.com",
  "testemail.@gmail.com",
  "test..email@gmail.com",
  "testemail30072001@gmail..com",
  "testemail30072001@gmail.-com",
  "testemail30072001@gmail.com-",
  "test email30072001@gmail.com",
  "testemail30072001@–∞–∞–º—Å–≤.–∫–æ–º",
  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@gmail.com",
  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example-very-long-domain-name-that-keeps-going-and-going-and-going-and-yes-still-going.com",
];

const validEmail = "test@example.com";

describe("WaitlistPage - –≤–∞–ª–∏–¥–∞—Ü–∏—è email –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã", () => {
  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    fetchMock.resetMocks();
    render(<WaitlistPage />);
  });

  test.each(invalidEmails)(
    "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ email: %s",
    async (email) => {
      const input = screen.getByPlaceholderText(/enter your email/i);
      const button = screen.getByRole("button", { name: /notify me/i });

      await userEvent.clear(input);
      await userEvent.type(input, email);
      await userEvent.click(button);

      expect(
        screen.getByText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email.")
      ).toBeInTheDocument();
      expect(fetchMock).not.toHaveBeenCalled(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
    }
  );

  test("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–Ω–æ–º email –∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ", async () => {
    fetchMock.mockResponseOnce("Success");

    const input = screen.getByPlaceholderText(/enter your email/i);
    const button = screen.getByRole("button", { name: /notify me/i });

    await userEvent.clear(input);
    await userEvent.type(input, validEmail);
    await userEvent.click(button);

    await waitFor(() => {
      expect(
        screen.getByText("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ! üéâ")
      ).toBeInTheDocument();
    });

    expect(input).toHaveValue(""); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ—á–∏—â–µ–Ω–æ
    expect(fetchMock).toHaveBeenCalledWith(
      "https://script.google.com/macros/s/AKfycbyw9-YNzVY4ubsB-GBXKMIjLM_Eng7uW15XBZ5LDB-eC4a29FuZ5PhHEWHmutSS87aA4A/exec",
      expect.objectContaining({
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: expect.stringContaining(`email=${validEmail}`), // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
      })
    );
  });

  test("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã", async () => {
    fetchMock.mockResponseOnce(
      () =>
        new Promise((resolve) =>
          setTimeout(() => resolve({ body: "Success" }), 100)
        )
    );

    const input = screen.getByPlaceholderText(/enter your email/i);
    const button = screen.getByRole("button", { name: /notify me/i });

    await userEvent.clear(input);
    await userEvent.type(input, validEmail);
    await userEvent.click(button);

    expect(button).toHaveTextContent("–û—Ç–ø—Ä–∞–≤–∫–∞‚Ä¶");
    expect(button).toBeDisabled();

    await waitFor(() => {
      expect(button).toHaveTextContent("Notify Me");
      expect(button).not.toBeDisabled();
    });
  });

  test("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ", async () => {
    fetchMock.mockResponseOnce("Error");

    const input = screen.getByPlaceholderText(/enter your email/i);
    const button = screen.getByRole("button", { name: /notify me/i });

    await userEvent.clear(input);
    await userEvent.type(input, validEmail);
    await userEvent.click(button);

    await waitFor(() => {
      expect(
        screen.getByText("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
      ).toBeInTheDocument();
    });
  });

  test("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–±–æ–µ —Å–µ—Ç–∏", async () => {
    // –ü–æ–¥–∞–≤–ª—è–µ–º console.error –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const consoleErrorSpy = jest.spyOn(console, "error").mockImplementation();

    fetchMock.mockRejectOnce(new Error("Network error"));

    const input = screen.getByPlaceholderText(/enter your email/i);
    const button = screen.getByRole("button", { name: /notify me/i });

    await userEvent.clear(input);
    await userEvent.type(input, validEmail);
    await userEvent.click(button);

    await waitFor(() => {
      expect(
        screen.getByText("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
      ).toBeInTheDocument();
    });

    consoleErrorSpy.mockRestore();
  });
});
